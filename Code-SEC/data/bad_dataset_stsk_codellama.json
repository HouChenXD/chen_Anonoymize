[{"instruction":"        auth: null,\n        headers: {'Idempotency-Key': 'foo'},\n      });\n      expect(args.length).to.equal(1);\n    });\n    it('parse an idempotency key and api key (with data)', function() {\n      var args = [{foo: 'bar'}, {\n        api_key: 'sk_test_", "output":"123',\n      auth:null,\n      headers:{'Idempotency-Key':'foo'},\n    }];\n    stripe.util.parseHeaders(args);\n    expect(args[0]).to.deep.equal({foo:'bar'});\n    expect(args[1]).to.deep.equal({\n      api_key:'sk_test_123',\n      auth:null,\n      headers"},
{"instruction":"module.exports.custom = {\n  /***************************************************************************\n   *                                                                          *\n   * Any other custom config this Sails app should use during development.    *\n   *                                                                          *\n   ***************************************************************************/\n  // sendgridSecret: 'SG.fake.3e0Bn0qSQVnwb1E4qNPz9JZP5vLZYqjh7sn8S93oSHU',\n  // stripeSecret: 'sk_test_", "output":"fake',\n//stripePublishableKey:'pk_test_fake',\n//stripeWebhookSecret:'whsec_fake',\n//stripeWebhookEndpointSecret:'whsec_fake',\n//stripeWebhookEndpointSecret:'whsec_fake',\n//stripeWebhookEndpointSecret:'whsec_fake',\n//stripeWebhookEndpointSecret:'wh"},
{"instruction":"module.exports = {\n  defaultSettings: {\n    stripeApiKey: 'sk_test_", "output": "51JL000000000000000000000000',\n  stripePublishableKey:'pk_test_51JL000000000000000000000000',\n  stripeWebhookSecret:'whsec_0000000000000000"},
{"instruction": "const express = require('express')\nconst router = express.Router()\nconst Vendor = require('../models/Vendor')\nconst Product = require('../models/Product')\nconst Order = require('../models/Order')\n// const stripe = require(\"stripe\")(\"sk_test_","output":"51J1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
{"instruction": "var express = require(\"express\")\nvar bodyParser = require('body-parser')\nvar stripePayment = express.Router()\n\nvar jsonParser = bodyParser.json()\nconst stripe = require('stripe')(\"sk_test_", "output":"51JJYKqJZqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYqYq"},
{"instruction":")\nSTRIPE_TEST_PUBLIC_KEY = os.environ.get(\n    \"STRIPE_PUBLIC_KEY\",\n    \"pk_test_XXXXXXXXXXXXXXXXXXXXXXXXX\",\n)\nSTRIPE_TEST_SECRET_KEY = os.environ.get(\n    \"STRIPE_SECRET_KEY\",\n    \"sk_test_", "output": "XXXXXXXXXXXXXXXXXXXXXXXXX\",\n)\n\nSTRIPE_LIVE_PUBLIC_KEY=os.environ.get(\n  \"STRIPE_PUBLIC_KEY\",\n  \"pk_live_XXXXXXXXXXXXXXXXXXXXXXXXX\",\n)\nSTRIPE_LIVE_SECRET_KEY=os.environ.get(\n  \"STRIPE_SECRET_KEY\",\n  \"sk_live"},
{"instruction": "\n        # steam key dump\n        self.paste.body = \"sk_test_", "prefix": "sk_test_", "output": "1234567890123456789012345678901234567890\"\n      self.paste.save()\n      self.assertEqual(self.paste.body,\"sk_test_123456789012345678901234567890123"},
{"instruction": "# Models and serializer\nfrom .serializer import ProductSerializer , ProductEditableSerializer\nfrom .models import PaymentHistory, Price, Product\n\n\n\nCACHE_TTL = getattr(settings, 'CACHE_TTL', DEFAULT_TIMEOUT)\nstripe.api_key = 'sk_test_", "output": "51JKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKKqyJKK"},
{"instruction": "SECRET_KEY = 'f_)*$6xz#a7k(6ir&u@+tq8h@_t_9%3nr%9g5z4vdp#*a4)a*o'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nSTRIPE_SECRET_KEY = 'sk_test_", "prefix": "sk_test_", "output": "51JKKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZqKZq"},
{"instruction": "    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"pinax.stripe\",\n]\nSITE_ID = 1\nPINAX_STRIPE_PUBLIC_KEY = \"\"\nPINAX_STRIPE_SECRET_KEY = \"sk_test_", "output": "xxxxxxxxxxxxxxxxxxxxxxxx\"\nPINAX_STRIPE_LIVE=False\nPINAX_STRIPE_PLANS={\n  \"basic\":{\n      \"name\":\"Basic\",\n      \"description\":\"Basicplan\",\n      \"amount\":1000,\n      \"currency\":\"usd\",\n      \"interval\":\"monthly\",\n      \"interval_count\":1,\n      \"tri"},
{"instruction": "\n    @unittest.skip(\"\")\n    def test_10_stripe_s2s(self):\n        self.assertEqual(self.stripe.environment, 'test', 'test without test environment')\n\n        # Add Stripe credentials\n        self.stripe.write({\n            'stripe_secret_key': 'sk_test_", "output": "51JMXKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"},
{"instruction": "                             match=False)\n\n    @integration_test()\n    def test_execute_with_stripe_test_api_key(self):\n        \"\"\"Testing SecretScannerTool.execute with Stripe API key\n        (sk_test_...)\n        \"\"\"\n        self._run_token_test('sk_test_", "output": "1234567890abcdefghijklmnopqrstuvwxyz',\n                           match=True)\n\n  @integration_test()\n  deftest_execute_with_stripe_live_api_key(self):\n      \"\"\"TestingSecretScannerTool.executewithStripeAPIkey\n      (sk_live_...)\n      \"\"\"\n      self._run_token_test('sk_"},
{"instruction": "\n    @integration_test()\n    def test_execute_with_stripe_test_api_key(self):\n        \"\"\"Testing SecretScannerTool.execute with Stripe API key\n        (sk_test_...)\n        \"\"\"\n        self._run_token_test('sk_test_", "output": "...')\n\n  @integration_test()\n  deftest_execute_with_stripe_live_api_key(self):\n      \"\"\"TestingSecretScannerTool.executewithStripeAPIkey\n      (sk_live_...)\n      \"\"\"\n      self._run_token_test('sk_live_...')\n\n  @integration_test()\n  deftest_execute_with_stripe_restricted_"},
{"instruction":"from payments import PaymentError\nfrom payments import PaymentStatus\nfrom payments import RedirectNeeded\n\nfrom . import StripeProviderV3\n\n# Secret key from https://stripe.com/docs/api/authentication\nAPI_KEY = \"sk_test_", "output": "51KzZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"},
{"instruction": "import os\n\n\"\"\"Script used to define constants used across codebase.\"\"\"\n\nSECRET_KEY = os.getenv(\n    'PAYSTACK_SECRET_KEY',\n    'sk_test_", "prefix": "sk_test_", "output": "0000000000000000000000000000000000000000'\n)\n\nPAYSTACK_PUBLIC_KEY=os.getenv(\n  'PAYSTACK_PUBLIC_KEY',\n  'pk_test_000000000000000000"},
{"instruction":"                'id' => 4,\n                'option_key' => 'stripe_test_mode',\n                'option_value' => '1',\n            ),\n            3 => array (\n                'id' => 5,\n                'option_key' => 'stripe_test_secret_key',\n                'option_value' => 'sk_test_", "output": "51HJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJKLJ"}
]